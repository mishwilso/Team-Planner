// =============================
// File: server/index.js
// =============================

// Import necessary modules
const express = require('express');              // Web framework for handling routes and middleware
const http = require('http');                    // Built-in Node module for creating server
const { Server } = require('socket.io');         // WebSocket server for real-time communication
const cors = require('cors');                    // Middleware to enable CORS

const app = express();                           // Create an Express app
const server = http.createServer(app);           // Create HTTP server from Express app

// Initialize Socket.IO server and configure CORS
const io = new Server(server, {
  cors: {
    origin: '*',                                 // Allow requests from any origin (good for testing, not secure for prod)
  },
});

app.use(cors());                                  // Allow cross-origin requests

// Handle socket connections
io.on('connection', (socket) => {
  console.log('User connected:', socket.id);      // Log when a new user connects

  // Listen for task updates from a client and broadcast to all other clients
  socket.on('task_update', (data) => {
    socket.broadcast.emit('task_update', data);   // Share task updates in real-time
  });

  // Log when a user disconnects
  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

// Start the server
const PORT = 4000;
server.listen(PORT, () => console.log(`Server running on port ${PORT}`));


// =============================
// File: client/src/App.tsx
// =============================

import { useEffect, useState } from 'react';
import io from 'socket.io-client';                  // Client-side Socket.IO
import './App.css';

const socket = io('http://localhost:4000');         // Connect to backend server

// Define the Task interface
interface Task {
  id: string;
  title: string;
  status: 'todo' | 'doing' | 'done';               // Possible statuses
}

const App = () => {
  const [tasks, setTasks] = useState<Task[]>([]);   // Keep track of current task list

  // When component mounts, listen for task updates
  useEffect(() => {
    socket.on('task_update', (data: Task[]) => {
      setTasks(data);                               // Update local state when receiving updates
    });
    return () => {
      socket.off('task_update');                    // Cleanup on unmount
    };
  }, []);

  // Update a task's status and notify server
  const updateTask = (id: string, newStatus: Task['status']) => {
    const updated = tasks.map(task =>
      task.id === id ? { ...task, status: newStatus } : task
    );
    setTasks(updated);
    socket.emit('task_update', updated);            // Broadcast to server
  };

  // Create a new task
  const createTask = () => {
    const newTask = {
      id: Math.random().toString(36).substr(2, 9),  // Generate random ID
      title: `Task ${tasks.length + 1}`,            // Simple naming
      status: 'todo' as const,
    };
    const updated = [...tasks, newTask];
    setTasks(updated);
    socket.emit('task_update', updated);            // Broadcast to server
  };

  // Render a task column (To Do, Doing, Done)
  const renderColumn = (status: Task['status']) => (
    <div className="column">
      <h3>{status.toUpperCase()}</h3>
      {tasks.filter(t => t.status === status).map(task => (
        <div key={task.id} className="task" onClick={() => {
          if (status === 'todo') updateTask(task.id, 'doing');
          else if (status === 'doing') updateTask(task.id, 'done');
        }}>
          {task.title}
        </div>
      ))}
    </div>
  );

  return (
    <div className="App">
      <h1>Smart Team Planner (Day 1 Demo)</h1>
      <button onClick={createTask}>New Task</button>
      <div className="board">
        {renderColumn('todo')}
        {renderColumn('doing')}
        {renderColumn('done')}
      </div>
    </div>
  );
};

export default App;


// =============================
// File: client/src/App.css
// =============================

.App {
  text-align: center;
  padding: 1rem;
}

.board {
  display: flex;              /* Side-by-side layout */
  justify-content: space-around;
  margin-top: 2rem;
}

.column {
  width: 30%;
  background: #f2f2f2;
  padding: 1rem;
  border-radius: 8px;
}

.task {
  background: white;
  margin: 0.5rem 0;
  padding: 0.75rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  cursor: pointer;
}
